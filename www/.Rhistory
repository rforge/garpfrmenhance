cr<-1
y1<-111
if(all(c(cr,y1)>100))
return("Please enter a percentage less than 100")
all(c(cr,y1)>100)
cr<-c(111,11,1)
if(all(cr>100))
return("Please enter a coupon rate less than 100%")
all(cr>100)
shiny::runApp('D:/CFRM/Summer 2014/GARPFRM/fixedincome')
shiny::runApp('D:/CFRM/Summer 2014/GARPFRM/fixedincome')
shiny::runApp('D:/CFRM/Summer 2014/GARPFRM/fixedincome')
shiny::runApp('D:/CFRM/Summer 2014/GARPFRM/fixedincome')
p<-c(cr,y1)
all(p>100)
y1<-1001
p<-c(cr,y1)
all(p>100)
all(p<100)
!all(p<100)
shiny::runApp('D:/CFRM/Summer 2014/GARPFRM/fixedincome')
df<-1:5
t<-1:6
df[1:length(t)]
a<-df[1:length(t)]
length(a)
length(a,na.rm=T)
length(a[na.rm=T])
a
a[na.rm=T]
shiny::runApp('D:/CFRM/Summer 2014/GARPFRM/fixedincome')
shiny::runApp('D:/CFRM/Summer 2014/GARPFRM/fixedincome')
shiny::runApp('D:/CFRM/Summer 2014/GARPFRM/fixedincome')
shiny::runApp('D:/CFRM/Summer 2014/GARPFRM/fixedincome')
?tapply
B<-rbind(c(5,40),c(3,10),c(-1,4))
B
solve(B)
A<-rbind(c(0.04,-0.07,0),c(-0.14,0,0),c(-0.31,0,1))
A
solve(A)
A
cb<-c(-150,-1000,0)
cb
cb%*%A
solve(A)
cb<-c(150,1000,0)
cb%*%A
B<-rbind(c(5,40,1),c(10,3,0),c(4,-1,0))
B
solve(B)
B<-rbind(c(5,40,1),c(10,3,0),c(4,-1,1))
solve(B)
B
B<-rbind(c(5,40,1),c(3,10,0),c(-1,4,,1))
solve(B)
B<-rbind(c(5,40,1),c(3,10,0),c(-1,4,1))
solve(B)
B
B<-rbind(c(5,40,0),c(3,10,0),c(-1,4,1))
solve(B)
N<-rbind(c(1,0),c(0,1),c(0,0))
N
B<-rbind(c(5,40,0),c(3,10,0),c(-1,4,1))
Binv<-solve(B)
N<-rbind(c(1,0),c(0,1),c(0,0))
Binv%*%N
cb<-c(150,1000,0)
cb%*%Binv%*%N
0.143/0.043
21.429/0.143
bond.data <- readRDS("data/bond_Data.rds")
setwd("D:/CFRM/Summer 2014/GARPFRM/FixedIncome")
bond.data <- readRDS("data/bond_Data.rds")
head(bond.data)
bond.data[Ask==100.6055,]
bond.data['Ask'==100.6055,]
bond.data['Ask'==100.6055,]
bond.data['Ask'==100.6055,]
head(bond.data)
bond.data[1,'Ask'==100.6055]
bond.data[,'Ask'==100.6055]
bon.data[1,]
bond.data[1,]
bond.data[,'Ask'==100.6055]
a<-bond.data[,'Ask'==100.6055]
a
a<-bond.data['Ask'==100.6055]
a
bond.data['Ask'==100.6055]
bond.data[,'Ask]
bond.data[,'Ask']
bond.data[,'Ask']
bond.data[,'Ask']==100.6055
bond.data[bond.data[,'Ask']==100.6055,]
bond.data[bond.data[,'Ask']==100.6055,2]
library(GARPFRM)
head(dat)
install.packages("GARPFRM", repos = "http://R-Forge.R-project.org")
install.packages("GARPFRM", repos = "http://R-Forge.R-project.org")
ls()
ls
head(dat)
library(GARPFRM)
head(dat)
data(crsp.short)
head(bonds)
data(bonds)
data(dat)
data(dat)
stock.df <- largecap.ts[, 1:20]
mrkt <- largecap.ts[, "market"]
rfr <- largecap.ts[, "t90"]
plot.zoo(stock.df[,1:4], main="First Four Large Cap Returns")
start(stock.df[,1:4])
end(stock.df[,1:4])
nrow(stock.df)
exReturns <- Return.excess(stock.df, rfr)
Returns.excess
Returns.excess()
Return.excess()
Return.excess
Return.excess
checkData
?NCOL
?as.PosIXct
?as.POSIXct
as.POSIXlt(Sys.time(), "Australia/Darwin")
as.POSIXlt(Sys.time(), "IST")
as.POSIXlt(Sys.time(), "India")
as.POSIXlt(Sys.time(), "New Delhi")
as.POSIXlt(Sys.time(), "China")
?xtsible
xtisible(exReturns)
xtsible(exReturns)
xtsible(a)
a
xtsible(exReturns)
try.xts(exReturns)
head(try.xts(exReturns))
head((exReturns))
?na.locf
?make.names
aa<-c("a",'v','c')
aa<c(aa,"a")
aa<-c(aa,"a")
aa
make.names(aa)
make.names(aa,unique=T)
?reclass
exReturns
head(exReturns)
colnames(exReturns)= c(colnames(stock.df))
exReturns
uv <- CAPM(exReturns[,1], mrkt)
uv
CAPM
head(mrkt)
head(rfr)
head(mrkt-rfr)
head(exReturns)
lm(exReturns~mrkt-rfr)
lm(exReturns[,1]~mrkt-rfr)
uv
lm(exReturns[,1]~(mrkt-rfr))
ex.mrt<-mrkt - rfr
ex.mrt
ex.mrkt<-mrkt - rfr
lm(exReturns[,1]~ex.mrkt)
uv
rfr
head(rfr)
?CAPM
plot(uv)
uv1<-lm(exReturns[,1]~ex.mrkt)
plot(uv1)
plot(uv1)
plot(uv1,which=1)
plot.capm
capm.plot
plot
GARPFRM::plot
plot.capm_uv(uv1)
plot.capm_uv <- function(x, y, ..., main="CAPM"){
xlab <- colnames(x$x_data)
ylab <- colnames(x$y_data)
plot(x=coredata(x$x_data), y=(x$y_data), ...=..., xlab=xlab, ylab=ylab, main=main)
abline(x)
abline(h=0,v=0,lty=3)
alpha = coef(summary(x))[1,1]
a_tstat = coef(summary(x))[1,2]
beta = coef(summary(x))[2,1]
b_tstat = coef(summary(x))[2,2]
legend("topleft", legend=c(paste("alpha =", round(alpha,digits=2),"(", round(a_tstat,digits=2),")"),
paste("beta =", round(beta,digits=2),"(", round(b_tstat,digits=2),")")), cex=.8, bty="n")
}
plot.capm_uv(uv1)
uv1$ydata<-ex.mrkt
uv1$xdata<-exReturns
plot.capm_uv(uv1)
uv1
uv1$xdata
uv1$xdata<-exReturns[,1]
plot.capm_uv(uv1)
x<-uv1
x
xlab <- colnames(x$x_data)
xlab
uv1$x_data<-exReturns[,1]
uv1$y_data<-ex.mrkt
plot.capm_uv(uv1)
xlab
xlab <- colnames(x$x_data)
ylab <- colnames(x$y_data)
ylab
x<-uv1
xlab <- colnames(x$x_data)
ylab <- colnames(x$y_data)
ylab
plot(x=coredata(x$x_data), y=(x$y_data), ...=..., xlab=xlab, ylab=ylab, main=main)
plot(x=coredata(x$x_data), y=(x$y_data), xlab=xlab, ylab=ylab, main=main)
abline(x)
abline(h=0,v=0,lty=3)
alpha = coef(summary(x))[1,1]
a_tstat = coef(summary(x))[1,2]
beta = coef(summary(x))[2,1]
b_tstat = coef(summary(x))[2,2]
legend("topleft", legend=c(paste("alpha =", round(alpha,digits=2),"(", round(a_tstat,digits=2),")"),
paste("beta =", round(beta,digits=2),"(", round(b_tstat,digits=2),")")), cex=.8, bty="n")
?class
class(uv1)<-"myclass"
plot.capm_uv(uv1)
plot.capm_uv(uv1)
uv1
plot(exReturn)
plot(exReturns)
plot(exReturns[,2:3])
plot(exReturns[,2])
plot(uv)
plot(uv1)
plot(uv1)
plot(uv)
plot(uv1)
plot(uv)
class(uv1)<-"capm_uv"
plot(uv1)
class(uv1)<-"myclass"
plot(uv1)
a_tstat
a_tstat = coef(summary(x))[1,2]
class(uv1)<-"capm_uv"
plot.capm_uv(uv1)
plot.capm_uv(uv1)
plot(x)
plot(uv1)
summary(uv1)
summary(uv)
class(uv1)<-"myclass"
plot.myclass(x)
{
plot(x,which=1)
}
plot.myclass<-function(x)
{
plot(x,which=1)
}
class(uv1)<-"myclass"
plot(x, which = 2)
plot(uv1)
plot(uv1,which=1)
plot.myclass<-function(x)
{
plot(x)
}
plot(uv1)
plot(uv1, which = 1)
plot.myclass<-function(x)
{
plot(x$x_data,y$y_data)
}
plot(uv1)
uv1
plot.myclass<-function(x)
{
plot(x$x_data,x$y_data)
}
plot(uv1)
plot(uv1)
plot(x$x_data,x$y_data)
x$x_data
x$y_data
plot(x$x_data,x$y_data)
getStatistics
object<-uv
if(!inherits(object, "capm_uv")) stop("object must be of class capm_uv")
tmp_sm <- summary.lm(object)
tmp_sm
result = coef(tmp_sm)[,c(1:4)]
result
pvalue= (2*(1 - pt(abs(tstat),df=nrow(object$x_data)-2)))
tstat = (result[2,1] - 1 )/result[2,2]
tstat
pvalue= (2*(1 - pt(abs(tstat),df=nrow(object$x_data)-2)))
result[2,3:4] = cbind(tstat, pvalue)
rownames(result) = cbind(c(paste("alpha.", colnames(object$y_data))),c(paste("beta. ", colnames(object$y_data))))
return(result)
result
result = coef(tmp_sm)[,c(1:4)]
result
result[2,1]
mlm <- CAPM(exReturns[,1:3], mrkt)
getStatistics(mlm)
object<-mlm
x <- coef(summary(object))
x
tmp_sm <- do.call(rbind, x)
tmp_sm
n=1
for (i in 1:ncol(coef(object))){
holder[,n:(i*2)] = cbind(c(paste("alpha.",colnames(coef(object))[i])) ,c(paste("beta. ",colnames(coef(object))[i])))
n = i*2 +1
}
x <- coef(summary(object))
tmp_sm <- do.call(rbind, x)
tmp_sm
holder = matrix(0,nrow=1,ncol=ncol(coef(object))*2)
n=1
for (i in 1:ncol(coef(object))){
holder[,n:(i*2)] = cbind(c(paste("alpha.",colnames(coef(object))[i])) ,c(paste("beta. ",colnames(coef(object))[i])))
n = i*2 +1
}
rownames(tmp_sm) <- c(holder)
getStatistics(mlm)
getBetas(uv)
getBetas(mlm)
hypTest(mlm, significanceLevel=0.05)
chartSML(mlm)
mu.hat = colMeans(object$y_data, na.rm=TRUE)
mu.hat
betas = getBetas(object)
betas
sml.fit = lm(mu.hat~betas)
plot(betas,mu.hat,main=main)
main="Estimated SML"
plot(betas,mu.hat,main=main)
abline(sml.fit)
data(consumption)
consumption <- xts(consumption, as.yearmon(index(consumption)))
mrkt <- xts(mrkt, as.yearmon(index(mrkt)))
consumption <- consumption[index(mrkt)]
capm.cons = CAPM(consumption, mrkt)
coef(summary(capm.cons))
summary(uv)
summary(uv1)
uv1<-lm(exReturns[,1]~ex.mrkt)
summary(uv1)
uv1$xdata<-mrkt
uv1$ydata<-rfr
summary(uv1)
plot(capm.cons)
consumption
head(consumption)
tmp_sm = getStatistics(object)
tmp_A = tmp_sm[seq(1,nrow(tmp_sm),2),4] < significanceLevel
tmp_sm
object
tmp_sm = getStatistics(object)
tmp_A = tmp_sm[seq(1,nrow(tmp_sm),2),4] < significanceLevel
significanceLevel = 0.05
tmp_A = tmp_sm[seq(1,nrow(tmp_sm),2),4] < significanceLevel
tmp_B = tmp_sm[seq(2,nrow(tmp_sm),2),4] < significanceLevel
result = list(alpha = tmp_A, beta = tmp_B)
result
tmp_sm[seq(1,nrow(tmp_sm),2),4]
tmp_sm
seq(1,nrow(tmp_sm),2)
library('knitr')
opts_chunk$set(message=FALSE, fig.path='figures/', fig.align='center', fig.width=4, fig.height=3, fig.keep='last', dev.args=list(pointsize=8))
options(width=80)
library(quantmod)
args(getSymbols)
getSymbols('^GSPC')
chart_Series(GSPC)
getSymbols('^GSPC')
getSymbols('DGS3MO',src='FRED')
library(quantmod)
getSymbols('^GSPC')
getSymbols('DGS3MO',src='FRED')
plot(DGS3MO,main="3-Month Treasury Constant Maturity Rate",cex.main=0.75)
getSymbols('^GSPC')
chart_Series(GSPC)
chart_Series
mu=0.05
sigma = 0.25
Time = 1
steps = 500
mu=0.05
sigma = 0.25
N = 500
time = 1
steps = 52
starting_value = 10
Time<-time
dt <- Time / steps
dt
musigdt <- (mu - 0.5 * sigma^2) * dt
sigdt <- sigma * sqrt(dt)
S <- vector("numeric", steps+1)
S
eps <- rnorm(steps)
eps
S[1] <- starting_value
S[1]
i = 2
S[i] <- S[i-1] * exp(musigdt + sigdt * eps[i-1])
S[i]
musigdt + sigdt * eps[i-1]
sigdt * eps[i-1]
S[1] <- starting_value
for(i in 2:length(S)){
S[i] <- S[i-1] * exp(musigdt + sigdt * eps[i-1])
}
S
mc_mat <- matrix(0, steps+1, N)
mc_mat
mc <- monteCarlo(0.05, 0.25, 500, 1, 52, 10)
mc
plot(mc)
ending_prices <- endingPrices(mc)
ending_prices
plotEndingPrices(mc)
summary(ending_prices)
quantile(ending_prices, c(0.05, 0.95))
mc <- monteCarlo(0.05, 0.25, 5000, 1, 52, 10)
plot(mc)
range
?range
?invisible
mcSim <- monteCarlo(mu, sigma, N, time, steps, startingValue)
summary(endingPrices(mcSim))
startingValue <- 100
mcSim <- monteCarlo(mu, sigma, N, time, steps, startingValue)
summary(endingPrices(mcSim))
par(mfrow=c(2,1))
plot(mcSim)
plotEndingPrices(mcSim)
par(mfrow=c(1,1))
data(crsp_weekly)
R.MSFT <- largecap_weekly[, "MSFT"]
nAhead <- 5
S.p <- 25
bootS <- vector("numeric", nAhead)
sample(R.MSFT, 1, TRUE)
for(i in 1:nAhead){
bootS[i] <- S.p * (1 + sample(R.MSFT, 1, TRUE))
S.p <- bootS[i]
}
bootS
S.p <- 25
bootS1 <- S.p * cumprod(1 + sample(coredata(R.MSFT), nAhead, TRUE))
bootS1
bootS1 <- S.p * cumprod(1 + sample(coredata(R.MSFT), nAhead, TRUE))
bootS1
bootS1 <- S.p * cumprod(1 + sample(coredata(R.MSFT), nAhead, TRUE))
bootS1
?cumprod
cumprod(1 + sample(coredata(R.MSFT), nAhead, TRUE))
a<-cumprod(1 + sample(coredata(R.MSFT), nAhead, TRUE))
S.p*a
a<-cumprod(1 + sample(coredata(R.MSFT), nAhead, TRUE))
S.p*a
bootS1
a<-cumprod(1 + sample(coredata(R.MSFT), nAhead, TRUE))
S.p*a
cumprod(S.p,1 + sample(coredata(R.MSFT), nAhead, TRUE))
1 + sample(coredata(R.MSFT), nAhead, TRUE)
cumprod(1 + sample(coredata(R.MSFT), nAhead, TRUE))
S.p  cumprod(1 + sample(coredata(R.MSFT), nAhead, TRUE))
S.p * cumprod(1 + sample(coredata(R.MSFT), nAhead, TRUE))
S.p * cumprod(1 + sample(coredata(R.MSFT), nAhead, TRUE))
1 + sample(coredata(R.MSFT), nAhead, TRUE)
cumprod(1:10)
cov
Return.portfolio
crsp.returns <- largecap.ts[, 1:6]
xyplot(crsp.returns, scale=list(y="same"), main="Monthly Returns")
boxplot(coredata(crsp.returns), pch=20, main="Monthly Returns")
MKT.ret <- largecap.ts[, "market"]
plot(MKT.ret, main="Market Monthly Returns")
hist(MKT.ret, probability=TRUE, main="Histogram of Market Returns",
col="lightblue", ylim=c(0, 10))
lines(density(MKT.ret), lty=2)
rug(MKT.ret)
legend("topleft", legend="kernel density estimate", lty=2,
cex=0.8, bty="n")
plot(density(MKT.ret), main="Density of Market Returns")
rug(MKT.ret)
curve(dnorm(x, mean=mean(MKT.ret), sd=sd(MKT.ret)),
add=TRUE, col="red", lty=2, lwd=2)
curve(dnorm(x, mean=median(MKT.ret), sd=mad(MKT.ret)),
add=TRUE, col="blue", lty=2, lwd=2)
legend("topleft", legend=c("kernel density estimate", "normal density estimate",
"robust normal density estimate"),
col=c("black", "red", "blue"), lty=c(1, 2, 2), bty="n", cex=0.8)
chart.QQPlot(MKT.ret, envelope=0.95, pch=18, main="Market Returns QQ Plot",
xlab="Theoretical Normal Quantiles")
chart.QQPlot
?chart.QQPlot
chart.QQPlot(MKT.ret, envelope=0.95, pch=18, main="Market Returns QQ Plot",
xlab="Theoretical Normal Quantiles")
legend("topleft", legend=c("Quartile-Pairs Line", "95% Confidence Envelope"),
col=c("blue", "blue"), lty=c(1, 2), cex=0.8, bty="n")
